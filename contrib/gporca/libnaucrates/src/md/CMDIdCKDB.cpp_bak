#include "naucrates/md/CMDIdCKDB.h"

#include "naucrates/dxl/xml/CXMLSerializer.h"

using namespace gpos;
using namespace gpmd;


// initialize static members
// invalid key
CMDIdCKDB CMDIdCKDB::m_mdid_invalid_key(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeInvalid, 0, 0, 0);

// int2 mdid
CMDIdCKDB CMDIdCKDB::m_mdid_int2(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_INT2);

// int4 mdid
CMDIdCKDB CMDIdCKDB::m_mdid_int4(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_INT4);

// int8 mdid
CMDIdCKDB CMDIdCKDB::m_mdid_int8(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_INT8);

// bool mdid
CMDIdCKDB CMDIdCKDB::m_mdid_bool(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_BOOL);

// oid mdid
CMDIdCKDB CMDIdCKDB::m_mdid_oid(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_OID);

// numeric mdid
CMDIdCKDB CMDIdCKDB::m_mdid_numeric(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_NUMERIC);

// date mdid
CMDIdCKDB CMDIdCKDB::m_mdid_date(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_DATE);

// time mdid
CMDIdCKDB CMDIdCKDB::m_mdid_time(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TIME);

// time with time zone mdid
CMDIdCKDB CMDIdCKDB::m_mdid_timeTz(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TIMETZ);

// timestamp mdid
CMDIdCKDB CMDIdCKDB::m_mdid_timestamp(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TIMESTAMP);

// timestamp with time zone mdid
CMDIdCKDB CMDIdCKDB::m_mdid_timestampTz(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TIMESTAMPTZ);

// absolute time mdid
CMDIdCKDB CMDIdCKDB::m_mdid_abs_time(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_ABSTIME);

// relative time mdid
CMDIdCKDB CMDIdCKDB::m_mdid_relative_time(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_RELTIME);

// interval mdid
CMDIdCKDB CMDIdCKDB::m_mdid_interval(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_INTERVAL);

// time interval mdid
CMDIdCKDB CMDIdCKDB::m_mdid_time_interval(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TIMEINTERVAL);

// char mdid
CMDIdCKDB CMDIdCKDB::m_mdid_char(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_SINGLE_CHAR);

// bpchar mdid
CMDIdCKDB CMDIdCKDB::m_mdid_bpchar(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_CHAR);

// varchar mdid
CMDIdCKDB CMDIdCKDB::m_mdid_varchar(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_VARCHAR);

// text mdid
CMDIdCKDB CMDIdCKDB::m_mdid_text(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_TEXT);

// text mdid
CMDIdCKDB CMDIdCKDB::m_mdid_name(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_NAME);

// float4 mdid
CMDIdCKDB CMDIdCKDB::m_mdid_float4(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_FLOAT4);

// float8 mdid
CMDIdCKDB CMDIdCKDB::m_mdid_float8(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_FLOAT8);

// cash mdid
CMDIdCKDB CMDIdCKDB::m_mdid_cash(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_CASH);

// inet mdid
CMDIdCKDB CMDIdCKDB::m_mdid_inet(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_INET);

// cidr mdid
CMDIdCKDB CMDIdCKDB::m_mdid_cidr(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_CIDR);

// macaddr mdid
CMDIdCKDB CMDIdCKDB::m_mdid_macaddr(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_MACADDR);

// count(*) mdid
CMDIdCKDB CMDIdCKDB::m_mdid_count_star(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeAggregate, GPDB_COUNT_STAR);

// count(Any) mdid
CMDIdCKDB CMDIdCKDB::m_mdid_count_any(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeAggregate, GPDB_COUNT_ANY);

// uuid mdid
CMDIdCKDB CMDIdCKDB::m_mdid_uuid(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeType, GPDB_UUID);

// unknown mdid
CMDIdCKDB CMDIdCKDB::m_mdid_unknown(CMDIdCKDB::ECKDBMDOIdType::ECKDBMDOIdTypeInvalid, GPDB_UNKNOWN);

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::CMDIdCKDB
//
//	@doc:
//		Constructs a metadata identifier with specified oid and default version
//		of 1.0
//
//---------------------------------------------------------------------------
// CMDIdCKDB::CMDIdCKDB(CSystemId sysid, OID oid)
// 	: m_sysid(sysid),
// 	  m_oid(oid),
// 	  m_major_version(1),
// 	  m_minor_version(0),
// 	  m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
// {
// 	if (CMDIdCKDB::m_mdid_invalid_key.Oid() == oid)
// 	{
// 		// construct an invalid mdid 0.0.0
// 		m_major_version = 0;
// 	}

// 	// serialize mdid into static string
// 	Serialize();
// };

CMDIdCKDB::CMDIdCKDB(const ECKDBMDOIdType oid_type, OID oid) : 
	m_sysid(IMDId::EmdidCKDB, GPMD_CKDB_SYSID),
	mdoid_type(oid_type),
 	m_oid(oid),
 	m_major_version(1),
 	m_minor_version(0),
 	m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
{
	if (CMDIdCKDB::m_mdid_invalid_key.Oid() == oid)
	{
		// construct an invalid mdid 0.0.0
		m_major_version = 0;
	}
    Serialize();
};

CMDIdCKDB::CMDIdCKDB(const SINT type, OID oid, ULONG version_major, ULONG version_minor) :
	m_sysid(IMDId::EmdidCKDB, GPMD_CKDB_SYSID),
	mdoid_type(ECKDBMDOIdType(type)),
	m_oid(oid),
	m_major_version(version_major),
	m_minor_version(version_minor),
	m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
{
	Serialize();
};

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::CMDIdCKDB
//
//	@doc:
//		Constructs a metadata identifier with specified oid and default version
//		of 1.0
//
//---------------------------------------------------------------------------
// CMDIdCKDB::CMDIdCKDB(OID oid)
// 	: m_sysid(IMDId::EmdidGPDB, GPMD_GPDB_SYSID),
// 	  m_oid(oid),
// 	  m_major_version(1),
// 	  m_minor_version(0),
// 	  m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
// {
// 	if (CMDIdCKDB::m_mdid_invalid_key.Oid() == oid)
// 	{
// 		// construct an invalid mdid 0.0.0
// 		m_major_version = 0;
// 	}

// 	// TODO:  - Jan 31, 2012; supply system id in constructor

// 	// serialize mdid into static string
// 	Serialize();
// }

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::CMDIdCKDB
//
//	@doc:
//		Constructs a metadata identifier
//
//---------------------------------------------------------------------------
// CMDIdCKDB::CMDIdCKDB(OID oid, ULONG version_major, ULONG version_minor)
// 	: m_sysid(IMDId::EmdidGPDB, GPMD_GPDB_SYSID),
// 	  m_oid(oid),
// 	  m_major_version(version_major),
// 	  m_minor_version(version_minor),
// 	  m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
// {
// 	// TODO:  - Jan 31, 2012; supply system id in constructor
// 	// serialize mdid into static string
// 	Serialize();
// }

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::CMDIdCKDB
//
//	@doc:
//		Copy constructor
//
//---------------------------------------------------------------------------
CMDIdCKDB::CMDIdCKDB(const CMDIdCKDB &mdid_source)
	: IMDId(),
	  mdoid_type(mdid_source.MDOIdType()),
	  m_sysid(mdid_source.Sysid()),
	  m_oid(mdid_source.Oid()),
	  m_major_version(mdid_source.VersionMajor()),
	  m_minor_version(mdid_source.VersionMinor()),
	  m_str(m_mdid_array, GPOS_ARRAY_SIZE(m_mdid_array))
{
	GPOS_ASSERT(mdid_source.IsValid());
	GPOS_ASSERT(IMDId::EmdidCKDB == mdid_source.MdidType());

	// serialize mdid into static string
	Serialize();
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::Serialize
//
//	@doc:
//		Serialize mdid into static string
//
//---------------------------------------------------------------------------
void
CMDIdCKDB::Serialize()
{
	m_str.Reset();
	// serialize mdid as SystemType.Oid.Major.Minor
	m_str.AppendFormat(GPOS_WSZ_LIT("%d.%d.%d.%d.%d"), MdidType(), MDOIdType(), m_oid,
					   m_major_version, m_minor_version);
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::GetBuffer
//
//	@doc:
//		Returns the string representation of the mdid
//
//---------------------------------------------------------------------------
const WCHAR *
CMDIdCKDB::GetBuffer() const
{
	return m_str.GetBuffer();
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::Oid
//
//	@doc:
//		Returns the object id
//
//---------------------------------------------------------------------------
OID
CMDIdCKDB::Oid() const
{
	return m_oid;
}


//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::VersionMajor
//
//	@doc:
//		Returns the object's major version
//
//---------------------------------------------------------------------------
ULONG
CMDIdCKDB::VersionMajor() const
{
	return m_major_version;
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::VersionMinor
//
//	@doc:
//		Returns the object's minor version
//
//---------------------------------------------------------------------------
ULONG
CMDIdCKDB::VersionMinor() const
{
	return m_minor_version;
}


//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::Equals
//
//	@doc:
//		Checks if the version of the current object is compatible with another version
//		of the same object
//
//---------------------------------------------------------------------------
BOOL
CMDIdCKDB::Equals(const IMDId *mdid) const
{
	if (NULL == mdid || EmdidCKDB != mdid->MdidType())
	{
		return false;
	}

	const CMDIdCKDB *mdidCKDB =
		static_cast<CMDIdCKDB *>(const_cast<IMDId *>(mdid));

	return (mdoid_type == mdidCKDB->MDOIdType() &&
            m_oid == mdidCKDB->Oid() &&
			m_major_version == mdidCKDB->VersionMajor() &&
			m_minor_version == mdidCKDB->VersionMinor());
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::IsValid
//
//	@doc:
//		Is the mdid valid
//
//---------------------------------------------------------------------------
BOOL
CMDIdCKDB::IsValid() const
{
	return !Equals(&CMDIdCKDB::m_mdid_invalid_key);
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::Serialize
//
//	@doc:
//		Serializes the mdid as the value of the given attribute
//
//---------------------------------------------------------------------------
void
CMDIdCKDB::Serialize(CXMLSerializer *xml_serializer,
					 const CWStringConst *attribute_str) const
{
	xml_serializer->AddAttribute(attribute_str, &m_str);
}

//---------------------------------------------------------------------------
//	@function:
//		CMDIdCKDB::OsPrint
//
//	@doc:
//		Debug print of the id in the provided stream
//
//---------------------------------------------------------------------------
IOstream &
CMDIdCKDB::OsPrint(IOstream &os) const
{
	os << "(" << MDOIdType() << "," << Oid() << "," << VersionMajor() << "." << VersionMinor() << ")";
	return os;
}

// EOF
